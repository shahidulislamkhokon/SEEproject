# Scenario 1

## Goal
A git repo named FinalProject is successfully created.  


## Pre-conditions
- Gitlab is up and running  
- A user account different from root has been created

  
## Main Success Scenario
1. Log in to GitLab using a NO root account
2. Create project and name it FinalProject
3. Follow the instructions to create the remote and local repositories as indicated by gitlab.
->Create SEEProduct project
-> to create the remote and local repositories
  1. use the project placed at:~/<git_root_folder>/khokon/FinalProject
  2. Commit and push to your created remote repository.

Build Automate:
At this stage I configured a Gitlab project where developer start the project automatically

Install Git Lab Runner

     1.~/<git_root_folder>/khokon/pipeline/integration (for ensuring)
     2. ssh to the VM:sudo vagrant ssh
	 
For Building FinalProject Register the Runner:
 Follow the steps:
  1. sudo gitlab-runner register
  2. Git URL: http://192.168.34.9/gitlab/
  3. runner enter:  [integration] docker 
  4. For the gitlab-ci tags for this runner enter:buildp
  5. executor:docker
  6. Docker image:alpine:latest
  7. Restart runner:sudo gitlab-runner restart
4. Commit and push to the remote repository.


## Notes
- In GitLab a project is a repository.




# Scenario 2

## Goal
The pipeline is successfully executed.  


## Pre-conditions
- Up and Run gitlab & gitlab runner
- Tag for docker runner is specified
- Created project repository on gitlab

  
## Main Success Scenario
1. Clone created repository from gitlab
2. Add `.gitlab-ci.yml` with following content

image: maven:latest

stages:
  - build
  - upload
  - deploytostage
  - test
  - deploytoprod
  
  

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  STAGE_BASE_URL: "http://192.168.33.17:8080"
  PRODUCTION_BASE_URL: "http://192.168.33.18:8080"


  # Define Tomcat's variables on Staging environment
  APACHE_HOME: "/opt/tomcat"
  APACHE_BIN: "$APACHE_HOME/bin"
  APACHE_WEBAPPS: "$APACHE_HOME/webapps"

  # Define product's variables
  PRODUCT_SNAPSHOT_NAME: "FinalProject-0.0.1-SNAPSHOT.war"
  RESOURCE_NAME: "FinalProject.war"  


cache:
  paths:
    - target/

build_app:
  stage: build
  tags:
    - buildp
  script:
    - mvn clean install



upload_app:
    stage: upload
    tags:
    - buildp
    script:
    - echo "Deploy user management app"
    artifacts:
        name: "my-app"
        paths:
        - target/*.war


deploy:
  stage: deploytostage
  tags:
    - deploytostage
  script:
    - echo "Shutdown Tomcat"
    - sudo sh $APACHE_BIN/shutdown.sh
    
    - echo "Deploy generated product into the stage-vm-helloworld environment" 
    - sudo cp target/$PRODUCT_SNAPSHOT_NAME $APACHE_WEBAPPS
    
    - echo "Set right name"
    - sudo mv $APACHE_WEBAPPS/$PRODUCT_SNAPSHOT_NAME $APACHE_WEBAPPS/$RESOURCE_NAME
    
    - echo "Set user asnd group rights"
    - sudo chown tomcat:tomcat $APACHE_WEBAPPS/$RESOURCE_NAME
    
    - echo "Start up Tomcat"
    - sudo sh $APACHE_BIN/startup.sh
    
    
test_app:
  stage: test
  tags:
    - buildp
  script: 
    - mvn test


deploy_production:
  stage: deploytoprod
  tags:
    - productiond
  script:
    - echo "Shutdown Tomcat"
    - sudo sh $APACHE_BIN/shutdown.sh
    
    - echo "Deploy generated product into the stage-vm-helloworld environment" 
    - sudo cp target/$PRODUCT_SNAPSHOT_NAME $APACHE_WEBAPPS
    
    - echo "Set right name"
    - sudo mv $APACHE_WEBAPPS/$PRODUCT_SNAPSHOT_NAME $APACHE_WEBAPPS/$RESOURCE_NAME
    
    - echo "Set user asnd group rights"
    - sudo chown tomcat:tomcat $APACHE_WEBAPPS/$RESOURCE_NAME
    
    - echo "Start up Tomcat"
    - sudo sh $APACHE_BIN/startup.sh
    
    

3. Push file to gitlab repository
4. Go to project's pipelines and wait until the pipeline has finished its execution.


## Notes
- None.